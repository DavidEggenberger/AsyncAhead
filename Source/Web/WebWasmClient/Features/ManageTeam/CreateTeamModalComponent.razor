<div>
    <h3>Create a new Team</h3>
    <EditForm Model=@team Context="editContext">
        <FluentValidationValidator />
        <div class="form-group">
            <label>Name</label>
            <OnInputBindInputText @bind-Value="team.Name"/>
            <ValidationMessage For="() => team.Name" />
        </div>
        <div class="form-group">
            <div class="CenterContainer">
                @if(picturePreview != null)
                {
                    <img src="@picturePreview"/>
                }
                <label id="SelectFileLabel" for="InputFile">Upload Icon</label>
                <InputFile id="InputFile" OnChange="@LoadFiles"/>
                <button @onclick="async() => await CreateGroupAsync()">Create</button>
            </div>         
        </div>
    </EditForm>
</div>


@code{
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    private EditContext editContext;
    TeamDTO team = new TeamDTO();
    private IBrowserFile browserFile;
    private string picturePreview;
    private string base64;
    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(team);
    }
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        IBrowserFile imgFile = e.File;
        var buffers = new byte[imgFile.Size];
        await imgFile.OpenReadStream().ReadAsync(buffers);
        string imageType = imgFile.ContentType;
        base64 = Convert.ToBase64String(buffers);
        picturePreview =$"data:{imageType};base64,{Convert.ToBase64String(buffers)}";
    }
    public async Task CreateGroupAsync()
    {
        await httpClientService.PostToAPI("/team", new CreateTeamDto { Name = team.Name, Base64Data = base64});
        await ModalInstance.CloseAsync();
        navigationManager.NavigateTo("/", true);
    }
}
