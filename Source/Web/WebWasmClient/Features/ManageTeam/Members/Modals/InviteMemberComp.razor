<div class="InviteUserToTeamContainer">
    <h3>Invite User through their E-Mail addresses to Team</h3>
    @foreach(var email in emailAddresses)
    {
        <div class="EmailSection">
            <h5>@email</h5>
            <button class="EmailRemoveButton" @onclick="() => emailAddresses.Remove(email)">Remove</button>
        </div>       
    }
    <div class="form-group">
        <label>E-Mail @valid</label>
        <input @bind="currentMail" @bind:event="oninput" type="text" @onkeydown="OnKeyDown"/>
    </div>
    <button @onclick="async() => await InviteUsersAsync()">Invite Users</button>
</div>


@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    private List<string> emailAddresses;
    private bool valid;
    private string _currentMail = string.Empty;
    public string currentMail
    {
        get => _currentMail;
        set
        {
            _currentMail = value;
            valid = ValidationService.Validate(new InviteTeamMembersDTO { Emails = new List<string> { _currentMail } }).IsValid;
        }
    }
    protected override async Task OnInitializedAsync()
    {
        emailAddresses = new List<string>();
    }

    public async Task OnKeyDown(KeyboardEventArgs args)
    {
        if(args.Key == "Enter" && valid)
        {
            emailAddresses.Add(currentMail);
            currentMail = string.Empty;
            StateHasChanged();
        }
    }

    public async Task InviteUsersAsync()
    {
        InviteTeamMembersDTO inviteUserToTeamDTO = new InviteTeamMembersDTO()
        {
            Emails = emailAddresses
        };
        await HttpClientService.PostToAPIAsync("/teammember/invite", inviteUserToTeamDTO);
        await ModalInstance.CloseAsync();
    }
}
