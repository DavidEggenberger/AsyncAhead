@attribute [Authorize]
@inherits LayoutComponentBase
@inject IJSRuntime jsRuntime
@inject NavigationManager navigationManager
@inject IHttpClientFactory httpClientFactory

<div class="page">
    <aside>
        <div class="CurrentTenantDisplayComponentContainer">
            <LoggedInTeamDisplayComponent Tenant="currentTenant"/>
        </div>
        <CascadingValue Value="currentTenant">
            <NavMenu/>
        </CascadingValue>
    </aside>
    <main>
        <nav>
            <div class="Filler"></div>
            <div class="LogoContainer">
                <div>
                    <a href="/">
                        <h1>AsyncAnalytics</h1>
                    </a>
                </div>    
            </div>
            <div class="ProfileContainer">
                <div>
                    <ProfileComponent/>
                </div>
            </div>
        </nav>
        <div class="Body">
            <CustomErrorBoundary @ref="errorBoundary">
                <ChildContent>
                    @Body
                </ChildContent>
                <ErrorContent Context="Exception">
                    <div class="ExceptionAlert">
                        <h3>@Exception.GetType()</h3>
                        <h3>@Exception.Message</h3>
                        <button class="btn btn-info" @onclick="() => errorBoundary.Recover()">Clear</button>
                    </div>
                </ErrorContent>
            </CustomErrorBoundary>
        </div>
    </main>
</div>

@code{
    private CustomErrorBoundary errorBoundary;
    private TeamDTO currentTenant;
    protected override async Task OnInitializedAsync()
    {
        currentTenant = await httpClientFactory.CreateClient("authorizedClient").GetFromJsonAsync<TeamDTO>("/api/team/current", new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsRuntime.InvokeVoidAsync("hideLoadingScreen");
        }
    }
}
