@attribute [Authorize]
@inherits LayoutComponentBase
@inject IJSRuntime jsRuntime
@inject NavigationManager navigationManager

<div class="page">
    <nav>
        <div class="LogoContainer">
            <img class="logo"/>
            <a href="/">
                <h1>AsyncAnalytics</h1>
            </a>
        </div>
        <div class="TitleAsideContainer">
            <ProfileComponent/>
        </div>
    </nav>
    <main>
        <aside id="aside">
            <img class="HomeLogo" src="/Icons/home.svg" @onclick='() => navigationManager.NavigateTo("/")'/>
            @if (expandedAside)
            {
                <TenantAsideOverviewComponent/>
            }
            else
            {
                <TenantAsideComponent/>
            }
            @if (expandedAside)
            {
                <img @onclick="async() => await ShrinkAside()" style="transform: rotate(180deg);" src="/Icons/angle-double-right.png"/>
            }
            else
            {
                <img @onclick="async() => await ExpandAside()" src="/Icons/angle-double-right.png"/>
            }
        </aside>
        <div>
            @Body
        </div>
    </main>
    <footer>
        <AntiForgeryTokenInput/>
    </footer>
</div>

@code{
    private bool expandedAside;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsRuntime.InvokeVoidAsync("hideLoadingScreen");
        }
    }
    private async Task ExpandAside()
    {
        await jsRuntime.InvokeVoidAsync("expandAside");
        await Task.Delay(300);
        expandedAside = true;
    }
    private async Task ShrinkAside()
    {
        await jsRuntime.InvokeVoidAsync("shrinkAside");
        await Task.Delay(300);
        expandedAside = false;
    }
}